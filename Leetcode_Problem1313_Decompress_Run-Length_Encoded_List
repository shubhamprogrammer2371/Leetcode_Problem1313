/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* decompressRLElist(int* nums, int numsSize, int* returnSize) {
    int *arr = malloc(100000*sizeof(int));
    *returnSize = 0;
    for( int i = 0 ; i < numsSize ; i += 2)
    {
        while(nums[i])
        {
            arr[(*returnSize)++] = nums[i+1];
            nums[i]--;
        }
    }
    return arr;
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* decompressRLElist(int* nums, int numsSize, int* returnSize){
    int prev = 0; *returnSize = 0;
    for (int i = 0; i < numsSize; i += 2) 
        *returnSize += nums[i];
    int* returnNums = (int*) malloc(sizeof(int) * (*returnSize));
    for (int i = 0; i < numsSize; i += 2) 
        for (int j = 0; j < nums[i]; j++) 
            returnNums[prev++] = nums[i + 1];
    return returnNums;
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* decompressRLElist(int* nums, int numsSize, int* returnSize) {
    int *arr = malloc(100000*sizeof(int));
    *returnSize = 0;
    for( int i = 0 ; i < numsSize ; i += 2)
        for( ; nums[i] ; nums[i]--)
            arr[(*returnSize)++] = nums[i+1];
    return arr;
}
